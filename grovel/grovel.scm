(import (scheme base) (scheme file) (scheme read) (scheme write))

(define (read-all)
  (let loop ((xs '()))
    (let ((x (read))) (if (eof-object? x) (reverse xs) (loop (cons x xs))))))

(define (disp . xs) (for-each display xs) (newline))
(define tab (make-string 4 #\space))
(define dq "\"")
(define sdq "\\\"")
(define snl "\\n")

(define all-known (with-input-from-file "errno-all-known.text" read-all))

(define (write-c-program)
  (disp "/* Generated by grovel.scm */")
  (disp)
  (disp "#include <errno.h>")
  (disp "#include <stdio.h>")
  (disp "#include <string.h>")
  (disp)
  (disp "#define PR(symbol) pr(#symbol, symbol)")
  (disp)
  (disp "static void pr(const char *symbol, int number) {")
  (disp tab "printf("
        dq "("
        sdq "%s" sdq
        " " "%d" " "
        sdq "%s" sdq
        ")" snl dq
        ", symbol, number, strerror(number));")
  (disp "}")
  (disp)
  (disp "static void pr_all(void);")
  (disp)
  (disp "int main(void) {")
  (disp tab "printf(" dq "(define errno-list '(" snl dq ");")
  (disp tab "pr_all();")
  (disp tab "printf(" dq "))" snl dq ");")
  (disp tab "return 0;")
  (disp "}")
  (disp)
  (disp "static void pr_all(void) {")
  (for-each (lambda (symbol)
              (disp "#ifdef " symbol)
              (disp tab "PR(" symbol ");")
              (disp "#endif"))
            all-known)
  (disp "}"))

(define (main) (with-output-to-file "grovel.c" write-c-program))

(main)
